type Account = record { owner : principal; subaccount : opt blob };
type BookTokensArg = record { quantity : nat32 };
type CanisterArgs = variant { Upgrade; Init : record { metadata : Metadata } };
type GetEscrowAccountRet = record {
  account_id : text;
  account : GetEscrowAccountRetAccount;
};
type GetEscrowAccountRetAccount = record {
  owner : principal;
  subaccount : blob;
};
type GetMetadataRet = record {
  weight : float64;
  drive_type : text;
  purchase_price : nat;
  token : principal;
  documents : vec record { text; text };
  supply_cap : nat;
  displays : text;
  seating : text;
  cargo : float64;
  logo : text;
  name : text;
  overall_height : float64;
  description : text;
  overall_width : float64;
  track_front : float64;
  collection_owner : principal;
  asset_canister : principal;
  ground_clearance : float64;
  key_features : vec text;
  range_per_charge : float64;
  track_rear : float64;
  acceleration : text;
  charging_speed : text;
  wheels : float64;
  brochure_url : text;
  index : principal;
  price : float64;
  battery : text;
  overall_length : float64;
  total_supply : nat;
  symbol : text;
  treasury : principal;
  images : vec text;
};
type Icrc7BalanceOfArgItem = record { owner : principal; subaccount : blob };
type Icrc7TokenMetadataRetItemInnerItem1 = variant {
  Int : int;
  Map : vec record { text; Icrc7TokenMetadataRetItemInnerItem1MapItem1 };
  Nat : nat;
  Blob : blob;
  Text : text;
  Array : vec Icrc7TokenMetadataRetItemInnerItem1MapItem1;
};
type Icrc7TokenMetadataRetItemInnerItem1MapItem1 = variant {
  Int : int;
  Nat : nat;
  Blob : blob;
  Text : text;
};
type Icrc7TokensOfArg = record { owner : principal; subaccount : opt blob };
type Icrc7TransferArgItem = record {
  to : Icrc7TokensOfArg;
  token_id : nat32;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
};
type Icrc7TransferRetItemInner = variant {
  Ok : nat32;
  Err : Icrc7TransferRetItemInnerErr;
};
type Icrc7TransferRetItemInnerErr = variant {
  GenericError : record { message : text; error_code : nat };
  Duplicate : record { duplicate_of : nat };
  NonExistingTokenId;
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  InvalidRecipient;
  GenericBatchError : record { message : text; error_code : nat };
  TooOld;
};
type Metadata = record {
  weight : float64;
  drive_type : text;
  purchase_price : nat;
  token : principal;
  documents : vec record { text; text };
  supply_cap : nat;
  displays : text;
  seating : text;
  cargo : float64;
  logo : text;
  name : text;
  overall_height : float64;
  description : text;
  overall_width : float64;
  track_front : float64;
  collection_owner : principal;
  asset_canister : principal;
  ground_clearance : float64;
  key_features : vec text;
  range_per_charge : float64;
  track_rear : float64;
  acceleration : text;
  charging_speed : text;
  wheels : float64;
  brochure_url : text;
  index : principal;
  price : float64;
  battery : text;
  overall_length : float64;
  symbol : text;
  treasury : principal;
  images : vec text;
};
type MetadataValue = variant { Nat : nat; Text : text };
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type Result_2 = variant { Ok : GetEscrowAccountRet; Err : text };
type Result_3 = variant { Ok : vec principal; Err : text };
type Result_4 = variant { Ok : GetMetadataRet; Err : text };
type SaleStatus = variant { Live; Rejected; Accepted };
type SupportedStandard = record { url : text; name : text };
type TransferArg = record {
  to : Account;
  fee : opt nat;
  memo : opt blob;
  from_subaccount : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type UpdateMetadataArgs = record {
  weight : opt float64;
  drive_type : opt text;
  purchase_price : opt nat;
  token : opt principal;
  documents : opt vec record { text; text };
  supply_cap : opt nat;
  displays : opt text;
  seating : opt text;
  cargo : opt float64;
  logo : opt text;
  name : opt text;
  overall_height : opt float64;
  description : opt text;
  overall_width : opt float64;
  track_front : opt float64;
  asset_canister : opt principal;
  ground_clearance : opt float64;
  key_features : opt vec text;
  range_per_charge : opt float64;
  track_rear : opt float64;
  acceleration : opt text;
  charging_speed : opt text;
  wheels : opt float64;
  brochure_url : opt text;
  index : opt principal;
  price : opt float64;
  battery : opt text;
  overall_length : opt float64;
  symbol : opt text;
  treasury : opt principal;
  images : opt vec text;
};
service : (CanisterArgs) -> {
  accept_sale : () -> (Result);
  book_tokens : (BookTokensArg) -> (Result);
  change_ownership : (principal) -> (Result_1);
  get_booked_tokens : (opt principal) -> (nat) query;
  get_escrow_account : () -> (Result_2) query;
  get_excess_escrow_balance : () -> (Result_3) query;
  get_metadata : () -> (Result_4) query;
  get_participating_investors : () -> (vec principal) query;
  get_sale_status : () -> (SaleStatus) query;
  get_total_booked_tokens : () -> (nat) query;
  icrc10_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_transfer : (principal, TransferArg) -> (Result_1);
  icrc7_atomic_batch_transfers : () -> (opt bool) query;
  icrc7_balance_of : (vec Icrc7BalanceOfArgItem) -> (vec nat64) query;
  icrc7_collection_metadata : () -> (vec record { text; MetadataValue }) query;
  icrc7_description : () -> (opt text) query;
  icrc7_logo : () -> (opt text) query;
  icrc7_max_default_take_value : () -> (opt nat) query;
  icrc7_max_memo_size : () -> (opt nat) query;
  icrc7_max_query_batch_size : () -> (opt nat) query;
  icrc7_max_take_value : () -> (opt nat) query;
  icrc7_max_update_batch_size : () -> (opt nat) query;
  icrc7_name : () -> (text) query;
  icrc7_owner_of : (vec nat32) -> (vec opt Account) query;
  icrc7_permitted_drift : () -> (opt nat) query;
  icrc7_supply_cap : () -> (opt nat) query;
  icrc7_symbol : () -> (text) query;
  icrc7_token_metadata : (vec nat32) -> (
      vec opt vec record { text; Icrc7TokenMetadataRetItemInnerItem1 },
    ) query;
  icrc7_tokens : (opt nat32, opt nat32) -> (vec nat32) query;
  icrc7_tokens_of : (Icrc7TokensOfArg, opt nat32, opt nat32) -> (
      vec nat32,
    ) query;
  icrc7_total_supply : () -> (nat) query;
  icrc7_transfer : (vec Icrc7TransferArgItem) -> (
      vec opt Icrc7TransferRetItemInner,
    );
  icrc7_tx_window : () -> (opt nat) query;
  refund_excess_after_sale : (principal) -> (Result);
  reject_sale : () -> (Result);
  update_metadata : (UpdateMetadataArgs) -> (Result_1);
  update_sale_status : (SaleStatus) -> (SaleStatus);
}
